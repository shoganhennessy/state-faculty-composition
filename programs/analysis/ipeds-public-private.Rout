
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 10 June 2022
> ## Investigate differences between public and private uni prof composition.
> set.seed(47)
> # Functions for data manipulation and visualisation
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.9
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> # Functions for panel data
> library(plm)

Attaching package: ‘plm’

The following objects are masked from ‘package:dplyr’:

    between, lag, lead

> 
> # Define number of digits in tables and graphs
> digits.no <- 3
> 
> # Size for figures
> fig.width <- 10
> fig.height <- fig.width * 0.75
> 
> 
> # Load data sources ------------------------------------------------------------
> # Load IPEDS data on all universities
> ipeds.data <- read_csv("../../data/urban-ipeds/urban-clean-allunis.csv")
Rows: 318274 Columns: 48
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (2): inst_name, state
dbl (46): unitid, year, public, forprofit, fouryear, associatescollege, cpi2...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> # Clean data -------------------------------------------------------------------
> 
> # Select IPEDS variables, and define the panel at the university level
> ipeds.data <- ipeds.data %>%
+     # Non for-profit unis, 4-year
+     filter(fouryear == 1, forprofit == 0) %>%
+     # Remove years with incomplete data
+     filter(1990 <= year, year != 2001, year <= 2021) %>%
+     # Restrict to relevant columns and rows.
+     select(
+         # Identifiers and controls
+         unitid,
+         inst_name,
+         year,
+         state,
+         public,
+         fouryear,
+         # Appropriations to the uni
+         totalrevenues_real,
+         nonauxrevenues_real,
+         stateappropriations_real,
+         tuitionrev_real,
+         # Uni spending.
+         nonauxspending_real,
+         # Uni enrollment
+         enrollment_reported,
+         enrollment_fte,
+         # Appropriation + tuition shocks Per uni
+         appropriationshock_peruni_real,
+         tuitionshock_peruni_real,
+         # Count of full-time professors (tenured or not)
+         lecturer_prof_count,
+         assistant_prof_count,
+         full_prof_count,
+         all_prof_count,
+         # Average faculty salary
+         full_profmeansalary_real,
+         assistant_profmeansalary_real,
+         lecturer_profmeansalary_real,
+         all_profmeansalary_real,
+         # Total professor salaries paid
+         all_profoutlays_real)
> gc()
          used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 2372733 126.8    4278942 228.6  4278942 228.6
Vcells 5891869  45.0   23413983 178.7 28361912 216.4
> 
> # Public vs private enrollment comparison --------------------------------------
> 
> 
> # Show enrollment at public vs private over time: total + average
> enrollment.data <- ipeds.data %>%
+     group_by(public, year) %>%
+     summarise(
+         enrollment_total = sum(enrollment_reported, na.rm = TRUE),
+         enrollment_mean = mean(enrollment_reported, na.rm = TRUE)) %>%
+     ungroup()
`summarise()` has grouped output by 'public'. You can override using the
`.groups` argument.
> # Draw the graph for enrollment total
> enrollment_total.plot <- enrollment.data %>%
+     ggplot(aes(x = year, y = enrollment_total, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0, 10^7),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> ggsave("../../text/figures/enrollment-total.png",
+     plot = enrollment_total.plot,
+     units = "cm", width = fig.width, height = fig.height)
> # Draw the graph for enrollment mean
> enrollment_mean.plot <- enrollment.data %>%
+     ggplot(aes(x = year, y = enrollment_mean, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0, 12500),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> ggsave("../../text/figures/enrollment-mean.png",
+     plot = enrollment_mean.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> # Public vs private salary comparison ------------------------------------------
> 
> # Compare to IPEDS provided table
> # https://nces.ed.gov/ipeds/search/ViewTable?tableId=10102&returnUrl=%2Fipeds%2Fsearch
> #ipeds.data %>%
> #    group_by(year, public, fouryear) %>%
> #    summarise(
> #        all_profmeansalary_real = weighted.mean(all_profmeansalary_real,
> #            weights = all_prof_count, na.rm = TRUE),
> #        full_profmeansalary_real = weighted.mean(full_profmeansalary_real,
> #            weights = lecturer_prof_count, na.rm = TRUE),
> #        assistant_profmeansalary_real = weighted.mean(assistant_profmeansalary_real,
> #            weights = assistant_prof_count, na.rm = TRUE),
> #        lecturer_profmeansalary_real = weighted.mean(lecturer_profmeansalary_real,
> #            weights = full_prof_count, na.rm = TRUE),
> #        full_prof_count = sum(full_prof_count, na.rm = TRUE),
> #        all_prof_count =  sum(all_prof_count, na.rm = TRUE)) %>%
> #    filter(year %in% 2018:2019) %>%
> #    View()
> #! Massive under-count for private uni prof salaries, as compared to here
> #! https://nces.ed.gov/ipeds/search/ViewTable?tableId=25036&returnUrl=%2Fipeds%2Fsearch
> 
> # Graph mean prof salary at public vs private uni.
> ipeds.data %>%
+     group_by(public, year) %>%
+     summarise(
+         full_profmeansalary_real = weighted.mean(full_profmeansalary_real,
+             weights = lecturer_prof_count, na.rm = TRUE),
+         assistant_profmeansalary_real = weighted.mean(assistant_profmeansalary_real,
+             weights = assistant_prof_count, na.rm = TRUE),
+         lecturer_profmeansalary_real = weighted.mean(lecturer_profmeansalary_real,
+             weights = full_prof_count, na.rm = TRUE),
+         all_profmeansalary_real = weighted.mean(all_profmeansalary_real,
+             weights = all_prof_count, na.rm = TRUE)) %>%
+     # Declare the plot.
+     ggplot(aes(x = year, colour = factor(public))) +
+     #geom_point(aes(y = all_profmeansalary_real, shape = "All Profs")) +
+     #geom_line(aes(y = all_profmeansalary_real,  shape = "All Profs")) +
+     geom_point(aes(y = assistant_profmeansalary_real, shape = "Assistant")) +
+     geom_line(aes(y = assistant_profmeansalary_real,  shape = "Assistant")) +
+     geom_point(aes(y = full_profmeansalary_real, shape = "Full")) +
+     geom_line(aes(y = full_profmeansalary_real,  shape = "Full")) +
+     geom_point(aes(y = lecturer_profmeansalary_real, shape = "Lecturer")) +
+     geom_line(aes(y = lecturer_profmeansalary_real,  shape = "Lecturer")) +
+     # Adjust the names and axis
+     scale_x_continuous(name = "Year",
+         breaks = seq(1990, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         #limits = c(0, 560),
+         #breaks = seq(0, 600, by = 50),
+         labels = scales::comma) +
+     theme_bw()
`summarise()` has grouped output by 'public'. You can override using the
`.groups` argument.
Warning messages:
1: Ignoring unknown aesthetics: shape 
2: Ignoring unknown aesthetics: shape 
3: Ignoring unknown aesthetics: shape 
> 
> #! The salaries data show that public profs are paid more then private, which is not the case elsewhere
> #! There must be a problem with how these salary info are constructed specifically for private unis, so do not use these as an outcome in the analysis.
> 
> 
> # Plot prof per student over time ----------------------------------------------
> 
> # Graph mean prof count per students at public vs private uni.
> prof_perfte.data <- ipeds.data %>%
+     group_by(public, year) %>%
+     summarise(
+         full_fte_perprof     = sum(full_prof_count, na.rm = TRUE) /
+             sum(enrollment_reported, na.rm = TRUE),
+         assistant_fte_perprof = sum(assistant_prof_count, na.rm = TRUE) /
+             sum(enrollment_reported, na.rm = TRUE),
+         lecturer_fte_perprof  = sum(lecturer_prof_count, na.rm = TRUE) /
+             sum(enrollment_reported, na.rm = TRUE),
+         all_fte_perprof         = sum(all_prof_count, na.rm = TRUE) /
+             sum(enrollment_reported, na.rm = TRUE)) %>%
+     ungroup()
`summarise()` has grouped output by 'public'. You can override using the
`.groups` argument.
> 
> 
> # Draw the graph for all Professors per student
> full_fte_perprof.plot <- prof_perfte.data %>%
+     ggplot(aes(x = year, y = full_fte_perprof, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0.015, 0.03),
+         breaks = seq(0, 0.05, by = 0.005),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> ggsave("../../text/figures/full-fte-perprof.png",
+     plot = full_fte_perprof.plot,
+     units = "cm", width = fig.width, height = fig.height)
> # Draw the graph for TT Professors per student
> assistant_fte_perprof.plot <- prof_perfte.data %>%
+     ggplot(aes(x = year, y = assistant_fte_perprof, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0.005, 0.015),
+         breaks = seq(0, 0.05, by = 0.0025),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> ggsave("../../text/figures/assistant-fte-perprof.png",
+     plot = assistant_fte_perprof.plot,
+     units = "cm", width = fig.width, height = fig.height)
> # Draw the graph for lecturers Professors per student
> lecturer_fte_perprof.plot <- prof_perfte.data %>%
+     ggplot(aes(x = year, y = lecturer_fte_perprof, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0.003, 0.007),
+         breaks = seq(0, 0.007, by = 0.001),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> lecturer_fte_perprof.plot
> ggsave("../../text/figures/lecturer-fte-perprof.png",
+     plot = lecturer_fte_perprof.plot,
+     units = "cm", width = fig.width, height = fig.height)
> # Draw the graph for all Professors per student
> all_fte_perprof.plot <- prof_perfte.data %>%
+     ggplot(aes(x = year, y = all_fte_perprof, colour = factor(public))) +
+     geom_point() +
+     geom_line() +
+     scale_x_continuous(name = "Year",
+         breaks = seq(1985, 2020, by = 5)) +
+     scale_y_continuous(name = "",
+         limits = c(0.03, 0.05),
+         breaks = seq(0, 0.05, by = 0.005),
+         labels = scales::comma) +
+     theme_bw() +
+     theme(plot.title = element_text(hjust = 0.5),
+         legend.position = "top") +
+     scale_colour_discrete(name = "", labels = c("Private", "Public"))
> ggsave("../../text/figures/all-fte-perprof.png",
+     plot = all_fte_perprof.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> # Get figures in revenues (total + per student) public vs private --------------
> mean_funding.data <- ipeds.data %>%
+     group_by(year, public) %>%
+     summarise(
+         totalrevenues_mill =
+             mean(totalrevenues_real, na.rm = TRUE) / (10^6),
+         nonauxrevenues_mill =
+             mean(nonauxrevenues_real, na.rm = TRUE) / (10^6),
+         stateappropriations_mill =
+             mean(stateappropriations_real, na.rm = TRUE) / (10^6),
+         tuitionrev_mill =
+             mean(tuitionrev_real, na.rm = TRUE) / (10^6),
+         totalrevenues_perEnroll =
+             mean(totalrevenues_real / enrollment_reported, na.rm = TRUE),
+         nonauxrevenues_perEnroll =
+             mean(nonauxrevenues_real / enrollment_reported, na.rm = TRUE),
+         stateappropriations_perEnroll =
+             mean(stateappropriations_real / enrollment_reported, na.rm = TRUE),
+         tuitionrev_perEnroll =
+             mean(tuitionrev_real / enrollment_reported, na.rm = TRUE))
`summarise()` has grouped output by 'year'. You can override using the
`.groups` argument.
> 
> proc.time()
   user  system elapsed 
 10.933   0.237   8.678 
